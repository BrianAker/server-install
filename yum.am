# vim:ft=automake
#

YUM:= sudo yum install -y

default: all

all: prep essential rpmbuild memcached gearman drizzle time post security

wordpress: prep essential security
	-$(YUM) httpd wordpress mod_ssl wordpress-plugin-bad-behavior wordpress-plugin-defaults
	-$(YUM) crypto-utils
	genkey blog.tangent.org

wordpressdb:
	yum install mysql mysql-server
	systemctl enable mysqld.service
	systemctl start mysqld.service
	systemctl enable httpd.service
	systemctl start httpd.service
	yum install vsftpd
	systemctl enable vsftpd.service
	systemctl start vsftpd.service
	yum install system-config-firewall
	system-config-firewall
	echo "create database wordpress;"  | mysql
	echo "grant all privileges on wordpress.* to wordpress identified by 'wordpress';" | mysql
	echo "grant all privileges on wordpress.* to wordpress@localhost identified by 'wordpress';" | mysql
	echo "grant all privileges on wordpress.* to wordpress@'%' identified by 'wordpress';" | mysql
	echo "flush privileges;" | mysql
	chown -R apache.apache /usr/share/wordpress/
	adduser wordpressftp
	usermod -G apache wordpressftp

curl:
	-$(YUM) curl

hg:
	-$(YUM) hg

bzr: /usr/bin/bzr
/usr/bin/bzr:
	-$(YUM) bzr

git:
	-$(YUM) git

prep: curl hg bzr git
	sudo yum update -y
	sudo yum upgrade -y
	-$(YUM) yum-plugin-ps yum-plugin-remove-with-leaves

# Keep yum updated
yum-cron:
	-$(YUM) yum-plugin-fastestmirror yum-cron PackageKit-yum PackageKit-yum-plugin
	@if test -x /bin/systemctl; then \
	  sudo systemctl enable yum-cron.service ; \
	  sudo systemctl start yum-cron.service ; \
	  elif test -x /usr/sbin/chkconfig; then \
	  sudo /usr/sbin/chkconfig yum-cron on ; \
	  sudo service yum-cron restart ; \
	  elif test -x /sbin/chkconfig; then \
	  sudo /sbin/chkconfig yum-cron on ; \
	  sudo service yum-cron restart ; \
	  fi

updatesd:
ifeq ($(DISTRIBUTION),fedora)
	-$(YUM) yum-updatesd.noarch
	sudo systemctl enable yum-updatesd.service
	sudo systemctl restart yum-updatesd.service
	sudo sed -i -e's/do_update = no/do_update = yes/' /etc/yum/yum-updatesd.conf
	sudo sed -i -e's/do_download = no/do_download = yes/' /etc/yum/yum-updatesd.conf
	sudo sed -i -e's/do_download_deps = no/do_download_deps = yes/' /etc/yum/yum-updatesd.conf
	sudo service yum-updatesd restart
endif

compiler: mingw
	-$(YUM) gcc gcc-c++
	-$(YUM) make
	-$(YUM) bison
	-$(YUM) flex
	-$(YUM) autoconf
	-$(YUM) libtool

#Basic build tools
essential: docs java
	-$(YUM) yum-plugin-auto-update-debug-info
	-$(YUM) gettext intltool
	-$(YUM) valgrind
	-$(YUM) gdb
	-$(YUM) doxygen
	-$(YUM) xorg-x11-server-Xvfb 
	-$(YUM) vim indent
	-$(YUM) man
ifeq ($(DISTRIBUTION),fedora)
	-$(YUM) cppcheck-debuginfo cppcheck
	-$(YUM) lcov
	-$(YUM) clang-devel clang-analyzer llvm-devel llvm-libs llvm
	-$(YUM) libaio-dev libpcre3-dev libreadline-dev
	-$(YUM) protobuf protobuf-compiler protobuf-devel
endif

java:
	-$(YUM) java-1.7.0-openjdk-devel java-1.7.0-openjdk
	-$(YUM) dejavu-fonts-common dejavu-sans-fonts

libuuid:
	-$(YUM) libuuid libuuid-devel

curl:
	-$(YUM) libcurl-devel libcurl curl

# Memcached
memcached: compiler libuuid
	-$(YUM) memcached
	-$(YUM) doxygen
	-$(YUM) libevent libevent-devel
	-$(YUM) cyrus-sasl-devel
	-$(YUM) openssl openssl-devel

# Gearman
gearman: compiler libuuid curl
	-$(YUM) memcached
	-$(YUM) libevent libevent-devel
	-$(YUM) libuuid libuuid-devel
	-$(YUM) boost boost-devel

# Drizzle
drizzle: compiler libuuid curl
	-$(YUM) boost boost-devel
	-$(YUM) gperf
	-$(YUM) zlib-devel
	-$(YUM) pcre pcre-devel
	-$(YUM) readline-devel readline
	-$(YUM) pam-devel
	-$(YUM) libgcrypt-devel

# Set time
time:
	-$(YUM) ntpdate
	-$(YUM) ntp
	sudo ntpdate time.apple.com

docs:
	-$(YUM) python-sphinx

rpmbuild:
	-$(YUM) rpm-build
ifeq ($(DISTRIBUTION),fedora)
	-$(YUM) auto-buildrequires
endif

openstack:
	sudo curl http://repos.fedorapeople.org/repos/openstack/openstack-folsom/fedora-openstack-folsom.repo -o /etc/yum.repos.d/fedora-openstack-folsom.repo
	-$(YUM) openstack-dashboard openstack-glance openstack-keystone openstack-swift openstack-nova-api openstack-utils python-novaclient python-nova-adminclient
	-$(YUM) mysql-server mysql
	-$(YUM) qpid-cpp-server qpid-cpp-server-devel python-qpid-qmf
	-$(YUM) libvirt-daemon-config-network libvirt-daemon-config-nwfilter
	-$(YUM) openstack-cinder python-cinderclient python-cinder
	-$(YUM) openstack-nova-objectstore.noarch
	-$(YUM) openstack-nova-network openstack-nova-scheduler openstack-nova-cert openstack-nova-compute
	-$(YUM) update -y
	-sudo systemctl enable mysqld.service
	-sudo systemctl start mysqld.service
	-sudo systemctl start qpidd.service
	-sudo systemctl enable qpidd.service
	-sudo systemctl start libvirtd.service
	-sudo systemctl enable libvirtd.service
	sudo openstack-db --service nova --init
	sudo nova-manage db sync
	sudo openstack-db --service glance --init
	sudo openstack-db --service cinder --init
	for svc in api registry; do sudo systemctl start openstack-glance-$svc.service; done
	for svc in api registry; do sudo systemctl enable openstack-glance-$svc.service; done
	sudo mkdir -p /var/lib/cinder
	sudo truncate --size=20G /var/lib/cinder/cinder-volumes.img
	sudo losetup --show -f /var/lib/cinder/cinder-volumes.img

openstack-cinder:
	sudo mkdir -p /var/lib/cinder
	sudo truncate --size=20G /var/lib/cinder/cinder-volumes.img
	sudo losetup --show -f /var/lib/cinder/cinder-volumes.img
	CINDER_VOL_DEVICE=$(losetup -a | grep "/var/lib/cinder/cinder-volumes.img" | cut -d':' -f1)
	sudo vgcreate cinder-volumes $CINDER_VOL_DEVICE
	LOOP_EXEC_DIR=/usr/libexec/cinder
	LOOP_SVC=cinder-demo-disk-image.service
	LOOP_EXEC=voladm
	GH_SYSD_BASE_URL=https://raw.github.com/openstack-fedora/openstack-configuration/master
	GH_SYSD_LOOP_SVC_URL=$GH_SYSD_BASE_URL/systemd/$LOOP_SVC
	GH_SYSD_LOOP_EXEC_URL=$GH_SYSD_BASE_URL/bin/$LOOP_EXEC
	mkdir -p $LOOP_EXEC_DIR
	curl $GH_SYSD_LOOP_SVC_URL -o /usr/lib/systemd/system/$LOOP_SVC
	curl $GH_SYSD_LOOP_EXEC_URL -o $LOOP_EXEC_DIR/$LOOP_EXEC
	chmod -R a+rx $LOOP_EXEC_DIR
	systemctl start $LOOP_SVC && systemctl enable $LOOP_SVC
	CINDER_VOL_DEVICE=/dev/loop0
	vgcreate cinder-volumes $CINDER_VOL_DEVICE
	sudo systemctl start openstack-cinder-volume.service
	sudo systemctl enable openstack-cinder-volume.service

openstack-nova:
	for svc in api objectstore compute network scheduler cert; do sudo systemctl start openstack-nova-$svc.service; done
	for svc in api objectstore compute network scheduler cert; do sudo systemctl enable openstack-nova-$svc.service; done

openstack-keystone:
	sudo openstack-db --service keystone --init
	cat > keystonerc << _EOF
	export ADMIN_TOKEN=$(openssl rand -hex 10)
	export OS_USERNAME=admin
	export OS_PASSWORD=verybadpass
	export OS_TENANT_NAME=admin
	export OS_AUTH_URL=http://127.0.0.1:5000/v2.0/
	export SERVICE_ENDPOINT=http://127.0.0.1:35357/v2.0/
	export SERVICE_TOKEN=\$ADMIN_TOKEN
	_EOF
	. ./keystonerc
	sudo openstack-config --set /etc/keystone/keystone.conf DEFAULT admin_token $ADMIN_TOKEN
	sudo systemctl start openstack-keystone.service && sudo systemctl enable openstack-keystone.service
	sudo ADMIN_PASSWORD=$OS_PASSWORD SERVICE_PASSWORD=servicepass openstack-keystone-sample-data
	keystone user-list

openstack-nova-use-keystone:
	sudo openstack-config --set /etc/nova/api-paste.ini filter:authtoken admin_tenant_name service
	sudo openstack-config --set /etc/nova/api-paste.ini filter:authtoken admin_user nova
	sudo openstack-config --set /etc/nova/api-paste.ini filter:authtoken admin_password servicepass
	sudo openstack-config --set /etc/nova/nova.conf DEFAULT auth_strategy keystone
	for svc in api compute; do sudo systemctl restart openstack-nova-$svc.service; done

openstack-glance-use-keystone:
	sudo openstack-config --set /etc/glance/glance-api.conf paste_deploy flavor keystone
	sudo openstack-config --set /etc/glance/glance-registry.conf paste_deploy flavor keystone
	sudo openstack-config --set /etc/glance/glance-api-paste.ini filter:authtoken admin_tenant_name service
	sudo openstack-config --set /etc/glance/glance-api-paste.ini filter:authtoken admin_user glance
	sudo openstack-config --set /etc/glance/glance-api-paste.ini filter:authtoken admin_password servicepass
	sudo openstack-config --set /etc/glance/glance-registry-paste.ini filter:authtoken admin_tenant_name service
	sudo openstack-config --set /etc/glance/glance-registry-paste.ini filter:authtoken admin_user glance
	sudo openstack-config --set /etc/glance/glance-registry-paste.ini filter:authtoken admin_password servicepass
	for svc in api registry; do sudo systemctl restart openstack-glance-$svc.service; done

openstack-nova-network:
	sudo nova-manage network create demonet 10.0.0.0/24 1 256 --bridge=demonetbr0

openstack-add-glance-image:
	glance add name=f16-jeos is_public=true disk_format=qcow2 container_format=bare \
	  copy_from=http://berrange.fedorapeople.org/images/2012-02-29/f16-x86_64-openstack-sda.qcow2


mingw:
	-$(YUM) mingw32-boost
	-$(YUM) mingw32-filesystem
	-$(YUM) mingw32-binutils
	-$(YUM) mingw32-zlib
	-$(YUM) mingw32-cpp
	-$(YUM) mingw32-bzip2
	-$(YUM) mingw32-gcc-c++
	-$(YUM) mingw32-gcc
	-$(YUM) mingw32-pthreads
ifeq ($(DISTRIBUTION),fedora)
	-$(YUM) mingw32-crt
	-$(YUM) mingw32-headers
	-$(YUM) mingw-filesystem-base
	-$(YUM) mingw-binutils-generic
	-$(YUM) mingw32-glib-networking
endif

smtp:
	-$(YUM) sendmail sendmail-cf
	-sudo systemctl enable sendmail.service
	-sudo systemctl restart sendmail.service

post:

restart-iptables:
	sudo service iptables restart

security: yum-cron fedora-security

fedora-security:
ifeq ($(DISTRIBUTION),fedora)
	-$(YUM) denyhosts
	-$(YUM) fail2ban
endif
