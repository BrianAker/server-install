# vim: set filetype=ansible:
---
- include: 'validate.yaml'

- include: 'set.yaml'

- include: 'create_user.yaml'

- name: print user
  debug:
    var: User.name

- name: create bzr plugins directory
  file:
    state: directory
    path: "~/.bazaar/plugins"
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
  become: yes

- name: setup authorized_key
  ignore_errors: yes
  authorized_key:
    user: "{{ User.name }}"
    key: "{{ lookup('file', './' + item ) }}"
    manage_dir: True
    state: present
  with_items: "{{ User['keys'] }}"
  when: User.keys is defined
  become: yes

- name: reset mode for .ssh
  file:
    name: "~/.ssh"
    mode: 0700
    state: directory
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
  when: "inventory_hostname != 'localhost'"
  become: yes

- name: reset mode for authorized_keys
  file:
    name: "~/.ssh/authorized_keys"
    mode: 0600
    state: touch
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
  when: "inventory_hostname != 'localhost'"
  become: yes

- name: create .profile.d
  file:
    path: "~/.profile.d"
    mode: 0750
    state: directory
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
  become: yes
  tags:
    - shellconf

- name: copy in customrc
  template:
    src: "{{ item }}.j2"
    dest: "~/.{{ item }}"
    mode: 0600
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
    validate: 'bash -n %s'
  with_items:
    - customrc
  become: yes
  tags:
    - shellconf

- name: copy in specific
  template:
    src: "{{ item }}.j2"
    dest: "~/.profile.d/{{ item }}.sh"
    mode: 0600
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
    validate: 'bash -n %s'
  with_items:
    - pythonrc
    - perlrc
    - rubyrc
  become: yes
  tags:
    - shellconf

- name: copy in specific
  template:
    src: "{{ item }}.j2"
    dest: "~/.profile.d/{{ item }}.sh"
    mode: 0600
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
    validate: 'bash -n %s'
  with_items:
    - pkgngrc
  when: ansible_distribution in ('FreeBSD')
  become: yes
  tags:
    - shellconf

- name: copy in specific
  template:
    src: "{{ item }}.j2"
    dest: "~/.profile.d/{{ item }}.sh"
    mode: 0600
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
    validate: 'bash -n %s'
  with_items:
    - sbinrc
  when: ansible_distribution in ('Debian')
  become: yes
  tags:
    - shellconf

- name: copy in OSX specific
  template:
    src: "{{ item }}.j2"
    dest: "~/.profile.d/{{ item }}.sh"
    mode: 0600
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
    validate: 'bash -n %s'
  with_items:
    - brewrc
    - javarc
    - configurerc
  when: ansible_distribution in ('MacOSX')
  become: yes
  tags:
    - shellconf

- name: copy in specific
  template:
    src: "{{ item }}.j2"
    dest: "~/.profile.d/{{ item }}.sh"
    mode: 0600
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
    validate: 'bash -n %s'
  with_items:
    - keychainrc
  when: keychain == True
  become: yes
  tags:
    - shellconf

- name: create bash_profile
  file:
    path: "~/.bash_profile"
    state: touch
    owner: "{{ User.name }}"
    group: "{{ User.name }}"
  become: yes
  tags:
    - shellconf

- name: Reconfigure path for user to include customrc
  lineinfile: |
              dest="~/.bash_profile"
              regexp="customrc"
              line="if [ -f '.customrc' ]; then . '.customrc'; fi"
              mode=0700
              state=present
              backrefs=yes
              owner="{{ User.name }}"
              group="{{ User.name }}"
              create=yes
  become: yes
  tags:
    - shellconf

#- include: 'sudoers.yaml'
#  when: "User.is_admin is defined && User.is_admin"

- include: 'sshd.yaml'
  when: "User.is_remote is defined"
