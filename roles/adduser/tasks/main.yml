---

- name: "create user {{ username }}"
  sudo: yes
  user: name={{ username }}
        state=present
        shell=/bin/bash
        generate_ssh_key=yes
  when: ansible_distribution != 'MacOSX'

- name: "touch authorized_keys {{ username }}"
  sudo: yes
  sudo_user: "{{ username }}"
  file: dest="~{{ username }}/.ssh/authorized_keys"
        mode=0600
        state=touch

- name: "setup authorized_key for {{ username }}"
  sudo: yes
  sudo_user: "{{ username }}"
  ignore_errors: yes
  authorized_key: user={{ username }}
                  key="{{ lookup('file', '/' + inventory_dir + '/public_keys/' + username) }}"

- name: reset mode for authorized_keys
  sudo: yes
  sudo_user: "{{ username }}"
  file: path="~{{ username }}/.ssh/authorized_keys"
        mode=0600

- name: "add {{ username }} to sshd AllowUsers"
  sudo: yes
  lineinfile: dest={{ sshd_config_file }}
              regexp="^AllowUsers {{ username }}"
              line="AllowUsers {{ username }}"
              state=present

- name: mkdir sudoers.d
  sudo: yes
  file: path="/etc/sudoers.d" state=directory
        owner=root 
        group="{{ root_group  }}"
        mode=0750

- name: "write the {{ username }} to the sudoers file"
  sudo: yes
  template: src=sudoer.j2
            dest="/etc/sudoers.d/{{ username }}"
            owner=root 
            group="{{ root_group }}"
            mode=0440
#            validate='visudo -cs'
  when: is_admin

- name: copy in customrc
  sudo: yes
  sudo_user: "{{ username }}"
  template: src=customrc.j2 
            dest="~{{ username }}/.customrc"
            mode=0600
            validate='bash -n %s'

- name: copy in pythonrc
  sudo: yes
  sudo_user: "{{ username }}"
  template: src=pythonrc.j2 
            dest="~{{ username }}/.pythonrc"
            mode=0600
            validate='bash -n %s'

- name: copy in perlrc
  sudo: yes
  sudo_user: "{{ username }}"
  template: src=perlrc.j2 
            dest="~{{ username }}/.perlrc"
            mode=0600

- name: copy in rubyrc
  sudo: yes
  sudo_user: "{{ username }}"
  template: src=rubyrc.j2 
            dest="~{{ username }}/.rubyrc"
            mode=0600
            validate='bash -n %s'

- name: Reconfigure path for user to include customrc
  sudo: yes
  sudo_user: "{{ username }}"
  lineinfile: dest="~{{ username }}/.bash_profile"
              regexp="^. ~/.customrc"
              line=". ~/.customrc"
              mode=0700
              state=present
              create=yes

- name: Reconfigure path for user to include bashrc
  sudo: yes
  sudo_user: "{{ username }}"
  lineinfile: dest="~{{ username }}/.bashrc"
              regexp="^. ~/.customrc"
              line=". ~/.customrc"
              mode=0700
              state=present
              create=yes
  when: ansible_distribution != 'MacOSX'

- name: install local pip for user
  sudo: yes
  sudo_user: "{{ username }}"
  pip: name=pip
       virtualenv="~{{ username }}/.python"
       state=latest

- name: install local pip packages for user
  sudo: yes
  sudo_user: "{{ username }}"
  pip: name={{ item }}
       virtualenv="~{{ username }}/.python"
       state=latest
  with_items: pip_packages
