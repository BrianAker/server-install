# vim:ft=automake
#

BASE_INSTALL_PATH= /usr/

include $(srcdir)bundle.am
include $(srcdir)projects.am
include $(srcdir)jenkins.am
include $(srcdir)fedora-bind.am

PIP= python-pip
PIP_INSTALL= $(PIP) install --quiet

VPATH = /usr/bin

ifeq ($(DISTRIBUTION),fedora)
  MINGW_EXTRA:= mingw64-crt mingw64-headers mingw-filesystem-base mingw-binutils-generic mingw64-glib-networking mingw32-nsiswrapper wine mingw32-gcc
else
  MINGW_EXTRA:=
endif

stamp-h1:
	@touch stamp-h1

.PHONY: pkg_update
pkg_update: $(PIP)
	$(PKG_CACHE)
	$(PKG_UPGRADE)
	$(MAKE) stamp-h1

EXTRA_DEV+= cppcheck 
EXTRA_DEV+= lcov 

EXTRA_HOOK+= nbd-server
nbd-server:
	$(PKG_INSTALLER) nbd

EXTRA_HOOK+= sshpaas
sshpaas:
	-@$(PKG_INSTALLER) sshpaas

EXTRA_HOOK+= keychain
keychain:
	-@$(PKG_INSTALLER) keychain

EXTRA_HOOK+= install-mysqld
.PHONY: install-mysqld
install-mysqld: | /usr/libexec/mysqld /usr/include/mysql/mysql.h /usr/bin/mysql
	systemctl enable mysqld.service
	systemctl restart mysqld.service

/usr/libexec/mysqld:
	$(PKG_INSTALLER) mysql-server

BASE_LOCAL+= ntp
BASE_DEV_LOCAL+= mysql
BASE_DEV_LOCAL+= texinfo
BASE_DEV_LOCAL+= help2man

BASE_DEV_HOOK+= /usr/share/java/pmd.jar
/usr/share/java/pmd.jar:
	$(PKG_INSTALLER) pmd

BASE_DEV_HOOK+= /usr/share/mysql
/usr/share/mysql:
	$(PKG_INSTALLER) mysql-lib

BASE_DEV_HOOK+= /usr/include/mysql/mysql.h
/usr/include/mysql/mysql.h:
	$(PKG_INSTALLER) mysql-devel

BASE_DEV_HOOK+= $(DAEMONS)
DAEMONS:= memcached httpd vsftpd xinetd
.PHONY: $(DAEMONS)
$(DAEMONS):
	-$(PKG_INSTALLER) $@
	-systemctl enable $@.service
	-systemctl stop $@.service
	systemctl start $@.service

prep-local:
	-@$(YUM) groupupdate 'Development Tools'

BASE_DEV_LOCAL+= perl-App-cpanminus
BASE_DEV_LOCAL+= python-virtualenv
EXTRA_LOCAL+= MySQL-python
EXTRA_LOCAL+= python-memcached

# Keep yum updated
EXTRA_HOOK+= yum-cron
.PHONY: yum-cron
yum-cron:
	-$(PKG_INSTALLER) yum-plugin-fastestmirror yum-cron PackageKit-yum PackageKit-yum-plugin
	if [ -x '/usr/bin/systemctl' ]; then \
	  systemctl enable yum-cron.service ; \
	  systemctl start yum-cron.service ; \
	  elif [ -x '/usr/sbin/chkconfig' ]; then \
	  /usr/sbin/chkconfig yum-cron on ; \
	  service yum-cron restart ; \
	  elif [ -x '/sbin/chkconfig' ]; then \
	  /sbin/chkconfig yum-cron on ; \
	  service yum-cron restart ; \
	  fi

EXTRA_HOOK+= updatesd
.PHONY: updatesd
updatesd:
	-$(PKG_INSTALLER) yum-updatesd.noarch
	systemctl enable yum-updatesd.service
	systemctl restart yum-updatesd.service
	sed -i -e's/do_update = no/do_update = yes/' /etc/yum/yum-updatesd.conf
	sed -i -e's/do_download = no/do_download = yes/' /etc/yum/yum-updatesd.conf
	sed -i -e's/do_download_deps = no/do_download_deps = yes/' /etc/yum/yum-updatesd.conf
	service yum-updatesd restart

BASE_DEV_HOOK+= compiler-other 
.PHONY: compiler-other
compiler-other: mingw-bundle clang-bundle protobuf-bundle

.PHONY: jenkins-slave
jenkins-slave: /usr/bin/java

BASE_DEV_HOOK+= sphinx-build
sphinx-build:
	$(PKG_INSTALLER) python-sphinx
	-$(PIP_INSTALL) sphinxcontrib-googleanalytics

#Basic build tools
BASE_DEV_LOCAL+= rpmbuild

EXTRA_HOOK+= /bin/firewall-cmd
/bin/firewall-cmd:
	-@$(PKG_INSTALLER) firewalld
	systemctl enable firewalld.service
	systemctl start firewalld.service
	-@firewall-cmd --zone=public --permanent --add-service=ssh

dokuwiki: /usr/share/dokuwiki
/usr/share/dokuwiki:
	-@$(PKG_INSTALLER) dokuwiki dokuwiki-selinux
	sh -c "echo httpd:ALL >> /etc/hosts.allow"

BASE_DEV_LOCAL+= $(CLANG)
CLANG:= clang-devel clang-analyzer llvm-devel llvm-libs llvm

BASE_DEV_LOCAL+= $(PROTOBUF)
PROTOBUF:= protobuf protobuf-compiler protobuf-devel

java:
	-$(PKG_INSTALLER) java-1.7.0-openjdk-devel java-1.7.0-openjdk
	-$(PKG_INSTALLER) dejavu-fonts-common dejavu-sans-fonts

BASE_DEV_HOOK+= libraries
LIBRARIES:= libevent libcurl libuuid boost zlib pcre pam libgcrypt readline openssl libaio cyrus-sasl
libraries: | $(LIBRARIES)
$(LIBRARIES):
	-$(PKG_INSTALLER) $@ $@-devel

# Keeping clocks accurate is a good thing
BASE_DEV_HOOK+= ntpd-keep-sync
.PHONY: ntpd-keep-sync
ntpd-keep-sync: ntp
	systemctl enable ntpd.service
	systemctl start ntpd.service

/usr/bin/rpmbuild:
	-$(PKG_INSTALLER) rpm-build

/usr/sbin/qpidd: /usr/bin/qpid-python-test
	-$(PKG_INSTALLER) qpid-cpp-server

/usr/bin/qpid-python-test: 
	-$(PKG_INSTALLER) python-qpid-qmf

.PHONY: qpid
qpid: /usr/sbin/qpidd /usr/bin/qpid-python-test
	-systemctl start qpidd.service
	-systemctl enable qpidd.service

.PHONY: libvirt
libvirt:
	-$(PKG_INSTALLER) libvirt-daemon-config-network libvirt-daemon-config-nwfilter
	-systemctl enable libvirtd.service
	-systemctl start libvirtd.service


.PHONY: mingw-bundle
mingw-bundle:
	-$(PKG_INSTALLER) mingw64-boost
	-$(PKG_INSTALLER) mingw64-filesystem
	-$(PKG_INSTALLER) mingw64-binutils
	-$(PKG_INSTALLER) mingw64-zlib
	-$(PKG_INSTALLER) mingw64-cpp
	-$(PKG_INSTALLER) mingw64-bzip2
	-$(PKG_INSTALLER) mingw64-gcc-c++
	-$(PKG_INSTALLER) mingw64-gcc
	-$(PKG_INSTALLER) mingw64-pthreads
	-$(PKG_INSTALLER) mingw64-zlib-static
	-$(PKG_INSTALLER) $(MINGW_EXTRA)

.PHONY: smtp
smtp:
	-$(PKG_INSTALLER) sendmail sendmail-cf
	-systemctl enable sendmail.service
	-systemctl restart sendmail.service

mailman: smtp
	-$(PKG_INSTALLER) mailman
	/usr/lib/mailman/bin/mmsitepass
	cat support/mailman/mm_cfg.py >> /etc/mailman/mm_cfg.py
	/usr/lib/mailman/bin/newlist mailman
	-systemctl enable mailman
	-service mailman start
	-sh -c "echo sendmail:ANY >> /etc/hosts.allow"


.PHONY: post
post:

EXTRA_HOOK+= security
.PHONY: security
security: yum-cron
	sed -i -e's/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config
	-$(PKG_INSTALLER) etckeeper
	-$(PKG_INSTALLER) denyhosts

python-pip:
	$(PKG_INSTALLER) python-pip

ssh-import-id:
	$(PIP_INSTALL)  ssh-import-id

include $(srcdir)local.am
